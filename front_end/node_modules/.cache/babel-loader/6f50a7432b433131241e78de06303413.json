{"ast":null,"code":"import firebase from 'firebase/app';\n\nasync function doCreateUserWithEmailAndPassword(email, password, displayName) {\n  await firebase.auth().createUserWithEmailAndPassword(email, password);\n  firebase.auth().currentUser.updateProfile({\n    displayName: displayName\n  });\n}\n\nasync function doChangePassword(email, oldPassword, newPassword) {\n  let credential = firebase.auth.EmailAuthProvider.credential(email, oldPassword);\n  await firebase.auth().currentUser.reauthenticateWithCredential(credential);\n  await firebase.auth().currentUser.updatePassword(newPassword);\n  await doSignOut();\n}\n\nasync function doSignInWithEmailAndPassword(email, password) {\n  await firebase.auth().signInWithEmailAndPassword(email, password);\n}\n\nasync function doSocialSignIn(provider) {\n  let socialProvider = null;\n\n  if (provider === 'google') {\n    socialProvider = new firebase.auth.GoogleAuthProvider();\n  } else if (provider === 'facebook') {\n    socialProvider = new firebase.auth.FacebookAuthProvider();\n  }\n\n  await firebase.auth().signInWithPopup(socialProvider);\n}\n\nasync function doPasswordReset(email) {\n  await firebase.auth().sendPasswordResetEmail(email);\n}\n\nasync function doPasswordUpdate(password) {\n  await firebase.auth().updatePassword(password);\n}\n\nasync function doSignOut() {\n  await firebase.auth().signOut();\n}\n\nexport { doCreateUserWithEmailAndPassword, doSocialSignIn, doSignInWithEmailAndPassword, doPasswordReset, doPasswordUpdate, doSignOut, doChangePassword };","map":{"version":3,"sources":["/Users/dmotan/Desktop/Master/Web Programming II/cs554-final-project/front_end/src/firebase/FirebaseFunctions.js"],"names":["firebase","doCreateUserWithEmailAndPassword","email","password","displayName","auth","createUserWithEmailAndPassword","currentUser","updateProfile","doChangePassword","oldPassword","newPassword","credential","EmailAuthProvider","reauthenticateWithCredential","updatePassword","doSignOut","doSignInWithEmailAndPassword","signInWithEmailAndPassword","doSocialSignIn","provider","socialProvider","GoogleAuthProvider","FacebookAuthProvider","signInWithPopup","doPasswordReset","sendPasswordResetEmail","doPasswordUpdate","signOut"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,cAArB;;AAEA,eAAeC,gCAAf,CAAgDC,KAAhD,EAAuDC,QAAvD,EAAiEC,WAAjE,EAA8E;AAC7E,QAAMJ,QAAQ,CAACK,IAAT,GAAgBC,8BAAhB,CAA+CJ,KAA/C,EAAsDC,QAAtD,CAAN;AACAH,EAAAA,QAAQ,CAACK,IAAT,GAAgBE,WAAhB,CAA4BC,aAA5B,CAA0C;AAAEJ,IAAAA,WAAW,EAAEA;AAAf,GAA1C;AACA;;AAED,eAAeK,gBAAf,CAAgCP,KAAhC,EAAuCQ,WAAvC,EAAoDC,WAApD,EAAiE;AAChE,MAAIC,UAAU,GAAGZ,QAAQ,CAACK,IAAT,CAAcQ,iBAAd,CAAgCD,UAAhC,CAA2CV,KAA3C,EAAkDQ,WAAlD,CAAjB;AACA,QAAMV,QAAQ,CAACK,IAAT,GAAgBE,WAAhB,CAA4BO,4BAA5B,CAAyDF,UAAzD,CAAN;AACA,QAAMZ,QAAQ,CAACK,IAAT,GAAgBE,WAAhB,CAA4BQ,cAA5B,CAA2CJ,WAA3C,CAAN;AACA,QAAMK,SAAS,EAAf;AACA;;AAED,eAAeC,4BAAf,CAA4Cf,KAA5C,EAAmDC,QAAnD,EAA6D;AAC5D,QAAMH,QAAQ,CAACK,IAAT,GAAgBa,0BAAhB,CAA2ChB,KAA3C,EAAkDC,QAAlD,CAAN;AACA;;AAED,eAAegB,cAAf,CAA8BC,QAA9B,EAAwC;AACvC,MAAIC,cAAc,GAAG,IAArB;;AACA,MAAID,QAAQ,KAAK,QAAjB,EAA2B;AAC1BC,IAAAA,cAAc,GAAG,IAAIrB,QAAQ,CAACK,IAAT,CAAciB,kBAAlB,EAAjB;AACA,GAFD,MAEO,IAAIF,QAAQ,KAAK,UAAjB,EAA6B;AACnCC,IAAAA,cAAc,GAAG,IAAIrB,QAAQ,CAACK,IAAT,CAAckB,oBAAlB,EAAjB;AACA;;AACD,QAAMvB,QAAQ,CAACK,IAAT,GAAgBmB,eAAhB,CAAgCH,cAAhC,CAAN;AACA;;AAED,eAAeI,eAAf,CAA+BvB,KAA/B,EAAsC;AACrC,QAAMF,QAAQ,CAACK,IAAT,GAAgBqB,sBAAhB,CAAuCxB,KAAvC,CAAN;AACA;;AAED,eAAeyB,gBAAf,CAAgCxB,QAAhC,EAA0C;AACzC,QAAMH,QAAQ,CAACK,IAAT,GAAgBU,cAAhB,CAA+BZ,QAA/B,CAAN;AACA;;AAED,eAAea,SAAf,GAA2B;AAC1B,QAAMhB,QAAQ,CAACK,IAAT,GAAgBuB,OAAhB,EAAN;AACA;;AAED,SACC3B,gCADD,EAECkB,cAFD,EAGCF,4BAHD,EAICQ,eAJD,EAKCE,gBALD,EAMCX,SAND,EAOCP,gBAPD","sourcesContent":["import firebase from 'firebase/app';\n\nasync function doCreateUserWithEmailAndPassword(email, password, displayName) {\n\tawait firebase.auth().createUserWithEmailAndPassword(email, password);\n\tfirebase.auth().currentUser.updateProfile({ displayName: displayName });\n}\n\nasync function doChangePassword(email, oldPassword, newPassword) {\n\tlet credential = firebase.auth.EmailAuthProvider.credential(email, oldPassword);\n\tawait firebase.auth().currentUser.reauthenticateWithCredential(credential);\n\tawait firebase.auth().currentUser.updatePassword(newPassword);\n\tawait doSignOut();\n}\n\nasync function doSignInWithEmailAndPassword(email, password) {\n\tawait firebase.auth().signInWithEmailAndPassword(email, password);\n}\n\nasync function doSocialSignIn(provider) {\n\tlet socialProvider = null;\n\tif (provider === 'google') {\n\t\tsocialProvider = new firebase.auth.GoogleAuthProvider();\n\t} else if (provider === 'facebook') {\n\t\tsocialProvider = new firebase.auth.FacebookAuthProvider();\n\t}\n\tawait firebase.auth().signInWithPopup(socialProvider);\n}\n\nasync function doPasswordReset(email) {\n\tawait firebase.auth().sendPasswordResetEmail(email);\n}\n\nasync function doPasswordUpdate(password) {\n\tawait firebase.auth().updatePassword(password);\n}\n\nasync function doSignOut() {\n\tawait firebase.auth().signOut();\n}\n\nexport {\n\tdoCreateUserWithEmailAndPassword,\n\tdoSocialSignIn,\n\tdoSignInWithEmailAndPassword,\n\tdoPasswordReset,\n\tdoPasswordUpdate,\n\tdoSignOut,\n\tdoChangePassword\n};\n"]},"metadata":{},"sourceType":"module"}